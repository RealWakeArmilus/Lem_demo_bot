from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
import logging

import app.Classes_States.SG as SG
from app.Classes_States.SG import update_state
from app.decorators.callback_utils import parse_callback_data

from app.decorators.message import MessageManager
from app.keyboards.appointment_doctor import appointment_doctor_kb, back_menu_appointment_doctor_kb

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == 'AppointmentDoctorBot')
async def start_appointment_doctor_bot(callback: CallbackQuery, state: FSMContext, remove_previous: bool = True):
    """–û –≤—Ä–∞—á–µ. –ù–∞—á–∞–ª–∞ –±–æ—Ç–∞ –ø–æ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É"""
    text = (
        "<b>üë®‚Äç‚öïÔ∏è **–û –≤—Ä–∞—á–µ**</b>\n\n"
        "<b>–ò–º—è:</b> [–ò–º—è –≤—Ä–∞—á–∞]\n" 
        "<b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> [–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–∞—á–∞]\n"
        "<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b> [–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç] –ª–µ—Ç\n"  
        "<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> [–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –∏ –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è]\n\n"
        
        "<b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
        "- [–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 1]\n"
        "- [–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 2]\n"
        "- [–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 3]\n\n"
        
        "<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> \n"
        "<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> [–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω]\n"
        "<b>üìß Email:</b> [Email –≤—Ä–∞—á–∞]\n\n"
        
        "<b>–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–º, –Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ</b>"
    )
    keyboard = await appointment_doctor_kb()
    message_manager = MessageManager(bot=callback.bot, state=state)
    await message_manager.send_photo(
        obj=callback,
        text=text,
        keyboard=keyboard,
        remove_previous=remove_previous,
        clear_state_all_exception_photo_message_id=True
    )


@router.callback_query(F.data == 'about_the_service')
async def about_the_service(callback: CallbackQuery, state: FSMContext):
    """–û–± —É—Å–ª—É–≥–µ"""
    text = (
        "<b>ü©∫ **–û —É—Å–ª—É–≥–µ**</b>\n"
        "<b>–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:</b> [–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏]\n"
        "<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏]\n\n"
        
        "<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
        "- [–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1]\n"
        "- [–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 2]\n"
        "- [–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 3]\n\n"
        
        "<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> [–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏]\n"
        "<b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> [–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏]\n\n"
        
        "<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞:</b> [–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö]\n\n"

        "<b>–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–º, –Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ</b>"
    )
    keyboard = await back_menu_appointment_doctor_kb()
    message_manager = MessageManager(bot=callback.bot, state=state)
    await message_manager.send_photo(
        obj=callback,
        text=text,
        keyboard=keyboard,
        remove_previous=True
    )


# üîπ –®–∞–±–ª–æ–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤ —à–∞–≥–æ–≤
STEP_TEXTS = {
    0: "<b>–í—Å—ë –≤–µ—Ä–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ?</b>",
    1: "<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:</b>\n",
    2: "<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n",
    3: "<b>–í—ã–±–µ—Ä–∏—Ç–µ –î–∞—Ç–∞ –∏ –í—Ä–µ–º—è:</b>\n"
}


async def step(callback, state, step: int, remove_previous: bool = True, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞."""
    message_manager = MessageManager(bot=callback.bot, state=state)
    data_form = await state.get_data()

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    for key, value in kwargs.items():
        if value is not None:
            data_form[key] = value

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π —Ç–µ–∫—Å—Ç —ç—Ç–∞–ø–æ–≤ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
    view_step = f"{step}/3 –≠–¢–ê–ü\n" if step != 0 else ''
    steps_text = (
        f"{view_step}"
        f"{'<b>1 –≠—Ç–∞–ø - –í–∞—à–µ –§–ò–û:</b>' if step == 1 else '1 –≠—Ç–∞–ø - –í–∞—à–µ –§–ò–û:'} {data_form.get('full_name', '')}\n"
        f"{'<b>2 –≠—Ç–∞–ø - –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>' if step == 2 else '2 –≠—Ç–∞–ø - –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:'} {data_form.get('number_phone', '')}\n"
        f"{'<b>3 –≠—Ç–∞–ø - –î–∞—Ç–∞ –∏ –í—Ä–µ–º—è:</b>' if step == 3 else '3 –≠—Ç–∞–ø - –î–∞—Ç–∞ –∏ –í—Ä–µ–º—è:'} {data_form.get('choice_date', '')}\n\n"
    )

    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"{steps_text}{STEP_TEXTS.get(step, '!–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ! –Ω–∞ –∫–∞–∫–æ–º –≤—ã —ç—Ç–∞–ø–µ?').format(data_form=data_form)}"
    keyboard = await back_menu_appointment_doctor_kb(step=step)
    await message_manager.send_photo(
        obj=callback,
        text=text,
        keyboard=keyboard,
        remove_previous=remove_previous
    )


@router.callback_query(F.data == 'sign_up_on_doctor')
async def one_step_sign_up_on_doctor(callback: CallbackQuery, state: FSMContext, remove_previous: bool = True,):
    """–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É 1/3"""
    await state.set_state(SG.FormSignUpOnDoctor.full_name)
    await step(callback, state, 1, remove_previous)


@router.message(SG.FormSignUpOnDoctor.full_name)
async def two_step_sign_up_on_doctor(message: Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É 2/3"""
    full_name = message.text.strip()
    await update_state(state, full_name=full_name)
    await state.set_state(SG.FormSignUpOnDoctor.number_phone)
    await step(message, state, 2)


@router.message(SG.FormSignUpOnDoctor.number_phone)
async def three_step_sign_up_on_doctor(message: Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É 3/3"""
    input_number_phone = message.text.strip()

    try:
        if not input_number_phone.isdigit() or not input_number_phone.startswith('8'):
            raise Exception('–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 8, –∏ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —á–∏—Å–µ–ª')
        if len(input_number_phone) != 11:
            raise Exception('–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä, –≤–∫–ª—é—á–∞—è —Å–Ω–∞—á–∞–ª–∞ —á–∏—Å–ª–æ 8.')

        input_number_phone = int(input_number_phone)

        await update_state(state, number_phone=input_number_phone)
        await state.set_state(SG.FormSignUpOnDoctor.choice_date)
        await step(message, state, 3)
    except Exception as error:
        text_error = (f'<b>–û—à–∏–±–∫–∞:</b> {error}\n\n'
                      f'<b>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</b>')
        message_manager = MessageManager(bot=message.bot, state=state)
        await message_manager.send_photo(
            obj=message,
            text=text_error
        )


@router.callback_query(lambda c: c.data and c.data.startswith('date_'))
async def end_sign_up_on_doctor(callback: CallbackQuery, state: FSMContext):
    """–ö–æ–Ω–µ—Ü –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É"""
    search_date = parse_callback_data(callback.data, 'date_')[1]
    await update_state(state, choice_date=search_date)
    data_form = await state.get_data()

    print(f'{data_form}')

    await step(callback, state, 0)


@router.callback_query(F.data == 'confirm_appointment_doctor')
async def confirm_sign_up_on_doctor(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–Ω—è–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏"""
    text = (
        '‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!'
    )
    message_manager = MessageManager(bot=callback.bto, state=state)
    await message_manager.send_photo(
        obj=callback,
        text=text,
        remove_previous=True,
        clear_state_all_exception_photo_message_id=True
    )

    latitude, longitude = 55.756404757933765, 37.615527927133925
    await callback.message.answer_location(latitude=latitude, longitude=longitude)

    text = (
        '<b>–ù–∞–π—Ç–∏ –Ω–∞—Å –º–æ–∂–µ—Ç–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É:</b> –ú–∞–Ω–µ–∂–Ω–∞—è –ø–ª., 1, —Å—Ç—Ä. 2, –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è, 125009'
    )
    message_manager = MessageManager(bot=callback.bto, state=state)
    await message_manager.send_photo(
        obj=callback,
        text=text,
        remove_previous=True,
        clear_state_all_exception_photo_message_id=True
    )

    await start_appointment_doctor_bot(callback=callback, state=state, remove_previous=False)


@router.callback_query(F.data == 'restart_appointment_doctor')
async def restart_sign_up_on_doctor(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏"""
    text = (
        '–í—ã —Ä–µ—à–∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ'
    )
    message_manager = MessageManager(bot=callback.bot, state=state)
    await message_manager.send_photo(
        obj=callback,
        text=text,
        remove_previous=True,
        clear_state_all_exception_photo_message_id=True
    )

    await one_step_sign_up_on_doctor(callback=callback, state=state, remove_previous=False)
